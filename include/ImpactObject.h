#ifndef IMPACTOBJECT_H_
#define IMPACTOBJECT_H_

#include "BaseObject.h"


class ImpactObject : public BaseObject
{
public:

  ImpactObject();
  ~ImpactObject();

  //----------------------------------------------------------------------------------------------------------------------
    /// @brief Getter for the object's direction (should always be normalised)
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 getDirection() { return m_Direction; }
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief Normalises and sets the direction of the particle
    /// @param [in] _dir The new direction vector
  //----------------------------------------------------------------------------------------------------------------------
  void setDirection(ngl::Vec3 _dir);
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief Getter for the object's absolute velocity
  //----------------------------------------------------------------------------------------------------------------------
  float getVelocity() { return m_Velocity; }
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets the object's velocity
    /// @param [in] _vel The new velocity
  //----------------------------------------------------------------------------------------------------------------------
  void setVelocity(float _vel);
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief Getter for the object's mass
  //----------------------------------------------------------------------------------------------------------------------
  float getMass() { return m_Mass; }
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets the object's mass
    /// @param [in] _mass The new mass
  //----------------------------------------------------------------------------------------------------------------------
  void setMass(float _mass);
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief Getter for the object's radius
  //----------------------------------------------------------------------------------------------------------------------
  float getRadius() {return m_Radius; }
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets the object's radius
    /// @param [in] _rad The new radius
  //----------------------------------------------------------------------------------------------------------------------
  void setRadius(float _rad);
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief Loads in a mesh for the object. Overrides the virtual definition in BaseObject.h
    /// @param [in] _file The file to be loaded
  //----------------------------------------------------------------------------------------------------------------------
  void loadMesh(std::string _file);
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief Updates the object's position by m_velocity along m_direction
  //----------------------------------------------------------------------------------------------------------------------
  void update();

private:

  //----------------------------------------------------------------------------------------------------------------------
    /// @brief The direction of the object. Always a unit vector
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_Direction;
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief The velocity of the object. Position increased by this amount with each call to update()
  //----------------------------------------------------------------------------------------------------------------------
  float m_Velocity;
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief Mass of the object. Affects the amount of force imparted upon a collision
  //----------------------------------------------------------------------------------------------------------------------
  float m_Mass;
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief Radius of the object. Larger radius causes force to be applied to more particles in a mesh
  //----------------------------------------------------------------------------------------------------------------------
  float m_Radius;


};

#endif
