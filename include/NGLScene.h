#ifndef NGLSCENE_H_
#define NGLSCENE_H_
#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Material.h>
#include <ngl/ShaderLib.h>
#include <ngl/Transformation.h>
#include <ngl/Vec3.h>
#include <QOpenGLWindow>

#include "Model.h"
#include "ParticleContainer.h"
#include "ImpactObject.h"
#include "ObjectUpdateThread.h"
#include "CollisionThread.h"
#include "WindowParams.h"
//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief this class inherits from the Qt OpenGLWindow and allows us to use NGL to draw OpenGL
/// @author Matt Skellon (Orignally by Jonathan Macey)
/// @version 1.0
/// @date 04/05/17
/// Revision History :
/// Initial version
/// @class NGLScene
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------

class NGLScene : public QOpenGLWindow
{
  public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for our NGL drawing class
    /// @param [in] parent the parent window to the class
    //----------------------------------------------------------------------------------------------------------------------
    NGLScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor must close down ngl and release OpenGL resources
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the initialize class is called once when the window is created and we have a valid GL context
    /// use this to setup any default GL stuff
    //----------------------------------------------------------------------------------------------------------------------
    void initializeGL();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void paintGL();

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we resize the window
    //----------------------------------------------------------------------------------------------------------------------
    void resizeGL(int _w, int _h);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Qt Event called when a key is pressed
    /// @param [in] _event the Qt event to query for size etc
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (QMouseEvent * _event );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is pressed
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent ( QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent ( QMouseEvent *_event );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent( QWheelEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sends transform matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadToShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets global mouse transforms
    /// @param [in] _pos Position about which to transform
    //----------------------------------------------------------------------------------------------------------------------
    void setMouseGlobal(ngl::Vec3 _pos);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets multiple transforms at once (e.g. for all particles in a mesh)
    /// @param [in] _scale Scale for transforms
    //----------------------------------------------------------------------------------------------------------------------
    void setMultipleTransforms(ngl::Vec3 _scale);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets a single object transform
    /// @param [in] _transform The transform to set
    /// @param [in] _pos Translate by this vector
    /// @param [in] _scale Scale by this vector
    //----------------------------------------------------------------------------------------------------------------------
    void setSingleTransform(ngl::Mat4 _transform, ngl::Vec3 _pos, ngl::Vec3 _scale);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Array of transforms for particles
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Mat4> transforms;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Texture Buffer Object
    //----------------------------------------------------------------------------------------------------------------------
    GLuint tbo;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Identifier for the texture
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_textureID;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Texture buffer identifier
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_tboID;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Windows parameters for mouse control etc.
    //----------------------------------------------------------------------------------------------------------------------
    WinParams m_win;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Stores global mouse transforms
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_mouseGlobalTX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Toggle showing the original mesh
    //----------------------------------------------------------------------------------------------------------------------
    char showInput = 0;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Camera object
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera m_cam;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Light object
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::Light> m_light;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Light position
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_lightPos = ngl::Vec3(1.0f, 17.0f, 0.0f);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Input model
    //----------------------------------------------------------------------------------------------------------------------
    Model Input;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Thread object for updating objects in the scene
    //----------------------------------------------------------------------------------------------------------------------
    ObjectUpdateThread *ObjectUpdater;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Thread object for detecting and handling collisions
    //----------------------------------------------------------------------------------------------------------------------
    CollisionThread *Collisions;

};



#endif
